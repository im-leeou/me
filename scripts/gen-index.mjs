console.log('hello');
// const Config = require('./config');

// const { EXCLUDED_FILENAMES, DUMP_FILENAMES, KEEP_FILENAMES } = Config;

// const shouldExcludeEmptyFolder = (folderPath) => {
//   const files = fs.readdirSync(folderPath);

//   if (
//     files?.length === 1 &&
//     [...DUMP_FILENAMES, ...KEEP_FILENAMES].includes(files[0])
//   ) {
//     return true;
//   }

//   return files.length === 0;
// };

// const normalizeFileInfo = (folderPath) => {
//   const files = fs.readdirSync(folderPath);

//   return files
//     .filter((fileName) => !EXCLUDED_FILENAMES.includes(fileName))
//     .filter((folderName) => {
//       if (folderName.includes('.')) {
//         return true;
//       }

//       const path = `${folderPath}/${folderName}`;

//       return !shouldExcludeEmptyFolder(path);
//     })
//     .map((fileName) => {
//       const [filename, ext] = fileName.split('.');

//       return {
//         filename,
//         ext
//       };
//     });
// };

// const generateExport = (fileName) => {
//   return `export * from './${fileName}';\n`;
// };

// const generateIndexFile = ({ folderPath, targetFilepath, deep }) => {
//   const normalizedFiles = normalizeFileInfo(folderPath);

//   if (!normalizedFiles?.length) {
//     return;
//   }

//   const exportLines = normalizedFiles?.map(({ filename }) =>
//     generateExport(filename)
//   );

//   const prettiedCode = `// This file is auto-generated by run "yarn gen:index"; DO NOT EDIT.\n${exportLines.join('')}`;

//   fs.writeFileSync(targetFilepath, prettiedCode);

//   if (deep === 1) {
//     console.log(`Generated index of ${folderPath}`);
//     return;
//   }

//   normalizedFiles.forEach(({ filename }) => {
//     const subFolderPath = `${folderPath}/${filename}`;
//     const subTargetFilepath = `${subFolderPath}/index.ts`;

//     generateIndexFile({
//       folderPath: subFolderPath,
//       targetFilepath: subTargetFilepath,
//       deep: deep - 1
//     });
//   });
// };

// /**
//  * @param {string} path
//  * @param {string} indexExt
//  * @param {number} deep
//  * * deep = 1: generate index file for the folder
//  * * deep = 2: generate index file for the folder and its sub-folders
//  * ! deep > 3: not supported yet
//  */
// const folderPathsConfig = [
//   {
//     path: 'src/assets',
//     indexExt: 'tsx',
//     deep: 1
//   },
//   {
//     path: 'src/components',
//     indexExt: 'ts',
//     deep: 1
//   },
//   {
//     path: 'src/configs',
//     indexExt: 'ts',
//     deep: 1
//   },
//   {
//     path: 'src/constants',
//     indexExt: 'ts',
//     deep: 1
//   },
//   {
//     path: 'src/contexts',
//     indexExt: 'ts',
//     deep: 1
//   },
//   {
//     path: 'src/helpers',
//     indexExt: 'ts',
//     deep: 1
//   },
//   {
//     path: 'src/hocs',
//     indexExt: 'ts',
//     deep: 1
//   },
//   {
//     path: 'src/hooks',
//     indexExt: 'ts',
//     deep: 1
//   },
//   {
//     path: 'src/interfaces',
//     indexExt: 'ts',
//     deep: 1
//   },
//   {
//     path: 'src/layouts',
//     indexExt: 'ts',
//     deep: 1
//   },
//   {
//     path: 'src/partials',
//     indexExt: 'ts',
//     deep: 2
//   },
//   {
//     path: 'src/schemas',
//     indexExt: 'ts',
//     deep: 2
//   },
//   {
//     path: 'src/services',
//     indexExt: 'ts',
//     deep: 1
//   },
//   {
//     path: 'src/stores/slices',
//     indexExt: 'ts',
//     deep: 1
//   },
//   {
//     path: 'src/types',
//     indexExt: 'ts',
//     deep: 1
//   },
//   {
//     path: 'src/utils',
//     indexExt: 'ts',
//     deep: 1
//   }
// ];

// folderPathsConfig.forEach((folderPathConf) =>
//   generateIndexFile({
//     ...folderPathConf,
//     folderPath: folderPathConf.path,
//     targetFilepath: `${folderPathConf.path}/index.${folderPathConf.indexExt}`
//   })
// );
